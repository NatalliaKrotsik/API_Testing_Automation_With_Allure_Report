{"uid":"296a71f61b20e51c","name":"Verify different users by ID and username","fullName":"tests.test_users_api#test_get_user_parametrized","historyId":"b936e5d39bc7586d3c4fc3d74e76185e","time":{"start":1747041851313,"stop":1747041851438,"duration":125},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"config = {'allure': {'build_name': 'Local Test Run', 'build_order': '1', 'executor_name': 'Local Machine', 'report_name': 'API ...tps://jsonplaceholder.typicode.com/', 'local_flask': 'http://127.0.0.1:5000/api', 'reqres': 'https://reqres.in/'}, ...}\nuser_id = 2, expected_username = 'Antonette'\n\n    @pytest.mark.parametrize(\"user_id, expected_username\", [\n        (1, \"Bret\"),\n        (2, \"Antonette\"),\n        (3, \"Samantha\")\n    ])\n    @allure.feature(\"GET /users/{id} with multiple inputs\")\n    @allure.title(\"Verify different users by ID and username\")\n    def test_get_user_parametrized(config, user_id, expected_username):\n        client = UserClient(config[\"api_base_url\"])\n        response = client.get_user(user_id)\n    \n        with allure.step(f\"Validate user ID: {user_id} and username: {expected_username}\"):\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_users_api.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":14,"retriesStatusChange":true,"beforeStages":[{"name":"config","time":{"start":1747041847645,"stop":1747041847647,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_configure_application","time":{"start":1747041851312,"stop":1747041851313,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"monkeypatch","time":{"start":1747041851312,"stop":1747041851312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_monkeypatch_response_class","time":{"start":1747041851313,"stop":1747041851313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_push_request_context","time":{"start":1747041851313,"stop":1747041851313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"config = {'allure': {'build_name': 'Local Test Run', 'build_order': '1', 'executor_name': 'Local Machine', 'report_name': 'API ...tps://jsonplaceholder.typicode.com/', 'local_flask': 'http://127.0.0.1:5000/api', 'reqres': 'https://reqres.in/'}, ...}\nuser_id = 2, expected_username = 'Antonette'\n\n    @pytest.mark.parametrize(\"user_id, expected_username\", [\n        (1, \"Bret\"),\n        (2, \"Antonette\"),\n        (3, \"Samantha\")\n    ])\n    @allure.feature(\"GET /users/{id} with multiple inputs\")\n    @allure.title(\"Verify different users by ID and username\")\n    def test_get_user_parametrized(config, user_id, expected_username):\n        client = UserClient(config[\"api_base_url\"])\n        response = client.get_user(user_id)\n    \n        with allure.step(f\"Validate user ID: {user_id} and username: {expected_username}\"):\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_users_api.py:31: AssertionError","steps":[{"name":"Validate user ID: 2 and username: Antonette","time":{"start":1747041851437,"stop":1747041851437,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"C:\\Users\\n.krotsik\\Desktop\\Pytest\\automation_project_API\\tests\\test_users_api.py\", line 31, in test_get_user_parametrized\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"monkeypatch::0","time":{"start":1747041851447,"stop":1747041851447,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"feature","value":"GET /users/{id} with multiple inputs"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users_api"},{"name":"host","value":"PLWRS-PF43AQAR"},{"name":"thread","value":"17100-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_username","value":"'Antonette'"},{"name":"user_id","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e8ccc8019355ecf","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747041660207,"stop":1747041660366,"duration":159}},{"uid":"e114c336c49d2899","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040770307,"stop":1747040770457,"duration":150}},{"uid":"e3437c1281079170","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040634829,"stop":1747040634970,"duration":141}},{"uid":"31325aa8fa7564a2","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040451376,"stop":1747040451514,"duration":138}},{"uid":"5fcc2de0cb4979af","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040368147,"stop":1747040368286,"duration":139}},{"uid":"94f5f1b6b4b20c85","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747039553103,"stop":1747039553231,"duration":128}},{"uid":"7f75c500b0acdd71","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038795812,"stop":1747038795952,"duration":140}},{"uid":"3f0739457991ee0","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038448199,"stop":1747038448341,"duration":142}},{"uid":"762bdb750d654739","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038420614,"stop":1747038420616,"duration":2}},{"uid":"b52b9da7884c1f79","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038360338,"stop":1747038360338,"duration":0}},{"uid":"5c5fc34d8a3d4876","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747037510864,"stop":1747037511018,"duration":154}},{"uid":"fe3b537b7de4a825","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747035984220,"stop":1747035984371,"duration":151}},{"uid":"2b7caab79cc4ee89","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1746615263559,"stop":1746615263698,"duration":139}},{"uid":"9ced8acc94b49c47","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1746614879662,"stop":1746614879842,"duration":180}}],"categories":[{"name":"Product defects","messageRegex":".*AssertionError.*","matchedStatuses":["failed"]}],"history":{"statistic":{"failed":7,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"bbf58e48a86cd27d","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747041660207,"stop":1747041660366,"duration":159}},{"uid":"1c2e119daf519502","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747039553103,"stop":1747039553231,"duration":128}},{"uid":"86174ff8b4f1ba15","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038795812,"stop":1747038795952,"duration":140}},{"uid":"226d3e2a1f420183","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038448199,"stop":1747038448341,"duration":142}},{"uid":"40192f56800c8825","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038360338,"stop":1747038360338,"duration":0}},{"uid":"a33f357860aeb09d","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747037510864,"stop":1747037511018,"duration":154}},{"uid":"833e0fc524e806c4","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747035984220,"stop":1747035984371,"duration":151}}]},"tags":[]},"source":"296a71f61b20e51c.json","parameterValues":["'Antonette'","2"]}