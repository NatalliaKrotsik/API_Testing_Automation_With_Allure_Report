{"uid":"236cb702e9eeb56a","name":"Verify that user with ID 1 can be fetched successfully","fullName":"tests.test_users_api#test_get_user_by_id","historyId":"3ec43f87416c2bd041efeb5019e120b7","time":{"start":1747041850988,"stop":1747041851139,"duration":151},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"config = {'allure': {'build_name': 'Local Test Run', 'build_order': '1', 'executor_name': 'Local Machine', 'report_name': 'API ...tps://jsonplaceholder.typicode.com/', 'local_flask': 'http://127.0.0.1:5000/api', 'reqres': 'https://reqres.in/'}, ...}\n\n    @allure.epic(\"User Management API\")\n    @allure.feature(\"GET /users/{id}\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Verify that user with ID 1 can be fetched successfully\")\n    def test_get_user_by_id(config):\n        client = UserClient(config[\"api_base_url\"])\n        response = client.get_user(1)\n    \n        with allure.step(\"Check response code and user data\"):\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_users_api.py:14: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":14,"retriesStatusChange":true,"beforeStages":[{"name":"config","time":{"start":1747041847645,"stop":1747041847647,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_configure_application","time":{"start":1747041850987,"stop":1747041850987,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"monkeypatch","time":{"start":1747041850987,"stop":1747041850987,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_monkeypatch_response_class","time":{"start":1747041850987,"stop":1747041850987,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_push_request_context","time":{"start":1747041850988,"stop":1747041850988,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"config = {'allure': {'build_name': 'Local Test Run', 'build_order': '1', 'executor_name': 'Local Machine', 'report_name': 'API ...tps://jsonplaceholder.typicode.com/', 'local_flask': 'http://127.0.0.1:5000/api', 'reqres': 'https://reqres.in/'}, ...}\n\n    @allure.epic(\"User Management API\")\n    @allure.feature(\"GET /users/{id}\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Verify that user with ID 1 can be fetched successfully\")\n    def test_get_user_by_id(config):\n        client = UserClient(config[\"api_base_url\"])\n        response = client.get_user(1)\n    \n        with allure.step(\"Check response code and user data\"):\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_users_api.py:14: AssertionError","steps":[{"name":"Check response code and user data","time":{"start":1747041851136,"stop":1747041851136,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"C:\\Users\\n.krotsik\\Desktop\\Pytest\\automation_project_API\\tests\\test_users_api.py\", line 14, in test_get_user_by_id\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"monkeypatch::0","time":{"start":1747041851145,"stop":1747041851145,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"epic","value":"User Management API"},{"name":"severity","value":"critical"},{"name":"feature","value":"GET /users/{id}"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users_api"},{"name":"host","value":"PLWRS-PF43AQAR"},{"name":"thread","value":"17100-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"ae50a0019e8fafea","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747041659956,"stop":1747041660058,"duration":102}},{"uid":"291e5909dd198b9","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040769966,"stop":1747040770120,"duration":154}},{"uid":"28a9a806884999c8","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040634523,"stop":1747040634661,"duration":138}},{"uid":"16c64b1b172e3a8e","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040451059,"stop":1747040451209,"duration":150}},{"uid":"4a5c942ba85f683","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040367838,"stop":1747040367983,"duration":145}},{"uid":"6e162a83af21c670","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747039552802,"stop":1747039552940,"duration":138}},{"uid":"2e1900d419d91137","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038795483,"stop":1747038795633,"duration":150}},{"uid":"720751e5acd2697c","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038447885,"stop":1747038448024,"duration":139}},{"uid":"b77321334f859f08","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038420576,"stop":1747038420576,"duration":0}},{"uid":"d0a5985501de878d","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038360314,"stop":1747038360314,"duration":0}},{"uid":"c26cc459442fe7ba","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747037510564,"stop":1747037510698,"duration":134}},{"uid":"45b10e6d7374939a","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747035983891,"stop":1747035984050,"duration":159}},{"uid":"e82c1c3815318c00","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1746615263228,"stop":1746615263376,"duration":148}},{"uid":"33457797c32d9121","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1746614879354,"stop":1746614879489,"duration":135}}],"categories":[{"name":"Product defects","messageRegex":".*AssertionError.*","matchedStatuses":["failed"]}],"history":{"statistic":{"failed":7,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"bd2d8a6f0c57f93f","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747041659956,"stop":1747041660058,"duration":102}},{"uid":"dddc822976e6c70d","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747039552802,"stop":1747039552940,"duration":138}},{"uid":"24d7094fb424c166","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038795483,"stop":1747038795633,"duration":150}},{"uid":"a73aaf9c20235a0b","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038447885,"stop":1747038448024,"duration":139}},{"uid":"e2e4114657470df3","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038360314,"stop":1747038360314,"duration":0}},{"uid":"79fd11a0fcd614cf","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747037510564,"stop":1747037510698,"duration":134}},{"uid":"b5554a1c1ddbd85","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747035983891,"stop":1747035984050,"duration":159}}]},"tags":[]},"source":"236cb702e9eeb56a.json","parameterValues":[]}