{"uid":"a76c7a4837728a35","name":"Verify different users by ID and username","fullName":"tests.test_users_api#test_get_user_parametrized","historyId":"7778e13f65a1a7b779f018844dfcdd4a","time":{"start":1747041851150,"stop":1747041851300,"duration":150},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"config = {'allure': {'build_name': 'Local Test Run', 'build_order': '1', 'executor_name': 'Local Machine', 'report_name': 'API ...tps://jsonplaceholder.typicode.com/', 'local_flask': 'http://127.0.0.1:5000/api', 'reqres': 'https://reqres.in/'}, ...}\nuser_id = 1, expected_username = 'Bret'\n\n    @pytest.mark.parametrize(\"user_id, expected_username\", [\n        (1, \"Bret\"),\n        (2, \"Antonette\"),\n        (3, \"Samantha\")\n    ])\n    @allure.feature(\"GET /users/{id} with multiple inputs\")\n    @allure.title(\"Verify different users by ID and username\")\n    def test_get_user_parametrized(config, user_id, expected_username):\n        client = UserClient(config[\"api_base_url\"])\n        response = client.get_user(user_id)\n    \n        with allure.step(f\"Validate user ID: {user_id} and username: {expected_username}\"):\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_users_api.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":14,"retriesStatusChange":true,"beforeStages":[{"name":"config","time":{"start":1747041847645,"stop":1747041847647,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_configure_application","time":{"start":1747041851149,"stop":1747041851149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_push_request_context","time":{"start":1747041851149,"stop":1747041851149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_monkeypatch_response_class","time":{"start":1747041851149,"stop":1747041851149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"monkeypatch","time":{"start":1747041851149,"stop":1747041851149,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"config = {'allure': {'build_name': 'Local Test Run', 'build_order': '1', 'executor_name': 'Local Machine', 'report_name': 'API ...tps://jsonplaceholder.typicode.com/', 'local_flask': 'http://127.0.0.1:5000/api', 'reqres': 'https://reqres.in/'}, ...}\nuser_id = 1, expected_username = 'Bret'\n\n    @pytest.mark.parametrize(\"user_id, expected_username\", [\n        (1, \"Bret\"),\n        (2, \"Antonette\"),\n        (3, \"Samantha\")\n    ])\n    @allure.feature(\"GET /users/{id} with multiple inputs\")\n    @allure.title(\"Verify different users by ID and username\")\n    def test_get_user_parametrized(config, user_id, expected_username):\n        client = UserClient(config[\"api_base_url\"])\n        response = client.get_user(user_id)\n    \n        with allure.step(f\"Validate user ID: {user_id} and username: {expected_username}\"):\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_users_api.py:31: AssertionError","steps":[{"name":"Validate user ID: 1 and username: Bret","time":{"start":1747041851300,"stop":1747041851300,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"C:\\Users\\n.krotsik\\Desktop\\Pytest\\automation_project_API\\tests\\test_users_api.py\", line 31, in test_get_user_parametrized\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"monkeypatch::0","time":{"start":1747041851308,"stop":1747041851308,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"feature","value":"GET /users/{id} with multiple inputs"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users_api"},{"name":"host","value":"PLWRS-PF43AQAR"},{"name":"thread","value":"17100-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_username","value":"'Bret'"},{"name":"user_id","value":"1"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"95964646798bdc19","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747041660069,"stop":1747041660192,"duration":123}},{"uid":"658eb85dc4f4775f","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040770131,"stop":1747040770283,"duration":152}},{"uid":"51c84e0494e73da5","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040634674,"stop":1747040634814,"duration":140}},{"uid":"28d1ddfe266c8f67","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040451218,"stop":1747040451364,"duration":146}},{"uid":"56a5f5d574200d7e","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040367994,"stop":1747040368133,"duration":139}},{"uid":"c3d38b29fcbc1493","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747039552964,"stop":1747039553079,"duration":115}},{"uid":"b4c1991f742ce68f","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038795644,"stop":1747038795797,"duration":153}},{"uid":"490fe6466f0ead22","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038448033,"stop":1747038448184,"duration":151}},{"uid":"97c1ca5ba646174f","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038420590,"stop":1747038420590,"duration":0}},{"uid":"a42b6db678757cc1","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038360324,"stop":1747038360325,"duration":1}},{"uid":"7897ccc61e4bf1c1","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747037510707,"stop":1747037510850,"duration":143}},{"uid":"4c9dc764b936acb5","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747035984058,"stop":1747035984208,"duration":150}},{"uid":"26b1bdb8cc8070e6","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1746615263388,"stop":1746615263543,"duration":155}},{"uid":"10f0fb76761324a8","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1746614879504,"stop":1746614879650,"duration":146}}],"categories":[{"name":"Product defects","messageRegex":".*AssertionError.*","matchedStatuses":["failed"]}],"history":{"statistic":{"failed":7,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"6e6daa3d8edd38ad","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747041660069,"stop":1747041660192,"duration":123}},{"uid":"130074f9545a340d","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747039552964,"stop":1747039553079,"duration":115}},{"uid":"cf01ba4525f6eade","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038795644,"stop":1747038795797,"duration":153}},{"uid":"aef0b759849e07a","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038448033,"stop":1747038448184,"duration":151}},{"uid":"1d5d2017a3378b49","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038360324,"stop":1747038360325,"duration":1}},{"uid":"b15a74f418357cb8","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747037510707,"stop":1747037510850,"duration":143}},{"uid":"cc844804ea3bd914","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747035984058,"stop":1747035984208,"duration":150}}]},"tags":[]},"source":"a76c7a4837728a35.json","parameterValues":["'Bret'","1"]}