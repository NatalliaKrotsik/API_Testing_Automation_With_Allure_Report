{"uid":"f21735007ec63310","name":"Verify different users by ID and username","fullName":"tests.test_users_api#test_get_user_parametrized","historyId":"61bd95e1ec26222b8dfd7459cce0636f","time":{"start":1747041851452,"stop":1747041851617,"duration":165},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"config = {'allure': {'build_name': 'Local Test Run', 'build_order': '1', 'executor_name': 'Local Machine', 'report_name': 'API ...tps://jsonplaceholder.typicode.com/', 'local_flask': 'http://127.0.0.1:5000/api', 'reqres': 'https://reqres.in/'}, ...}\nuser_id = 3, expected_username = 'Samantha'\n\n    @pytest.mark.parametrize(\"user_id, expected_username\", [\n        (1, \"Bret\"),\n        (2, \"Antonette\"),\n        (3, \"Samantha\")\n    ])\n    @allure.feature(\"GET /users/{id} with multiple inputs\")\n    @allure.title(\"Verify different users by ID and username\")\n    def test_get_user_parametrized(config, user_id, expected_username):\n        client = UserClient(config[\"api_base_url\"])\n        response = client.get_user(user_id)\n    \n        with allure.step(f\"Validate user ID: {user_id} and username: {expected_username}\"):\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_users_api.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":14,"retriesStatusChange":true,"beforeStages":[{"name":"config","time":{"start":1747041847645,"stop":1747041847647,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_push_request_context","time":{"start":1747041851451,"stop":1747041851451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_monkeypatch_response_class","time":{"start":1747041851451,"stop":1747041851451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"monkeypatch","time":{"start":1747041851451,"stop":1747041851451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"_configure_application","time":{"start":1747041851451,"stop":1747041851451,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"config = {'allure': {'build_name': 'Local Test Run', 'build_order': '1', 'executor_name': 'Local Machine', 'report_name': 'API ...tps://jsonplaceholder.typicode.com/', 'local_flask': 'http://127.0.0.1:5000/api', 'reqres': 'https://reqres.in/'}, ...}\nuser_id = 3, expected_username = 'Samantha'\n\n    @pytest.mark.parametrize(\"user_id, expected_username\", [\n        (1, \"Bret\"),\n        (2, \"Antonette\"),\n        (3, \"Samantha\")\n    ])\n    @allure.feature(\"GET /users/{id} with multiple inputs\")\n    @allure.title(\"Verify different users by ID and username\")\n    def test_get_user_parametrized(config, user_id, expected_username):\n        client = UserClient(config[\"api_base_url\"])\n        response = client.get_user(user_id)\n    \n        with allure.step(f\"Validate user ID: {user_id} and username: {expected_username}\"):\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntests\\test_users_api.py:31: AssertionError","steps":[{"name":"Validate user ID: 3 and username: Samantha","time":{"start":1747041851616,"stop":1747041851616,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"C:\\Users\\n.krotsik\\Desktop\\Pytest\\automation_project_API\\tests\\test_users_api.py\", line 31, in test_get_user_parametrized\n    assert response.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":1,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"monkeypatch::0","time":{"start":1747041851629,"stop":1747041851629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"feature","value":"GET /users/{id} with multiple inputs"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_users_api"},{"name":"host","value":"PLWRS-PF43AQAR"},{"name":"thread","value":"17100-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_users_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_username","value":"'Samantha'"},{"name":"user_id","value":"3"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6b5d232bd96e814c","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747041660377,"stop":1747041660489,"duration":112}},{"uid":"5c2cc5382247bcc6","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040770472,"stop":1747040770618,"duration":146}},{"uid":"b72837bdf8663ee5","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040634987,"stop":1747040635125,"duration":138}},{"uid":"3479f7bd21671295","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040451527,"stop":1747040451674,"duration":147}},{"uid":"d6e6cb6310823e3c","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747040368296,"stop":1747040368432,"duration":136}},{"uid":"a6404573322d57f","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747039553255,"stop":1747039553385,"duration":130}},{"uid":"504e5e6d84477830","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038795967,"stop":1747038796108,"duration":141}},{"uid":"23d4b580c7ed35a8","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038448356,"stop":1747038448521,"duration":165}},{"uid":"5338cc16a159eba1","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038420634,"stop":1747038420635,"duration":1}},{"uid":"c32c7e05e32801e7","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038360354,"stop":1747038360354,"duration":0}},{"uid":"91e8bec795c19e50","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747037511030,"stop":1747037511170,"duration":140}},{"uid":"ab95ea33ce819811","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747035984387,"stop":1747035984530,"duration":143}},{"uid":"5187ffe98330763b","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1746615263709,"stop":1746615263868,"duration":159}},{"uid":"c20eb3ebe0bcf794","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1746614879860,"stop":1746614879994,"duration":134}}],"categories":[{"name":"Product defects","messageRegex":".*AssertionError.*","matchedStatuses":["failed"]}],"history":{"statistic":{"failed":7,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"598ce882c79a93ae","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747041660377,"stop":1747041660489,"duration":112}},{"uid":"c18fdd9205300185","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747039553255,"stop":1747039553385,"duration":130}},{"uid":"c39b8c0e34f54fda","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038795967,"stop":1747038796108,"duration":141}},{"uid":"5bf8ff87d5733859","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747038448356,"stop":1747038448521,"duration":165}},{"uid":"9efc437f8ee0bf3a","status":"broken","statusDetails":"KeyError: 'api_base_url'","time":{"start":1747038360354,"stop":1747038360354,"duration":0}},{"uid":"3727b7fbd2f2095d","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747037511030,"stop":1747037511170,"duration":140}},{"uid":"3d37b07445bd5ec7","status":"failed","statusDetails":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","time":{"start":1747035984387,"stop":1747035984530,"duration":143}}]},"tags":[]},"source":"f21735007ec63310.json","parameterValues":["'Samantha'","3"]}